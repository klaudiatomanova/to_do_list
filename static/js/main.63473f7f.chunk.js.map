{"version":3,"sources":["components/Input/index.jsx","App.js","serviceWorker.js","index.js"],"names":["Input","useState","newTodo","setNewTodo","todos","setTodos","className","onSubmit","e","preventDefault","id","Date","now","text","type","value","onChange","target","placeholder","icon","faPlus","map","todo","key","faPen","onClick","filter","faCheck","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6UA8EeA,G,kBAvED,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACXC,EADW,KACFC,EADE,OAEQF,mBAAS,IAFjB,mBAEXG,EAFW,KAEJC,EAFI,KA0BlB,OACE,yBAAKC,UAAU,qBACb,0BAAMC,SAlBS,SAACC,GAElBA,EAAEC,iBAEc,KAAZP,IAEJG,EAAS,GAAD,mBAAKD,GAAL,CAAY,CAAEM,GAAIC,KAAKC,MAAOC,KAAMX,MAE5CC,EAAW,OAWP,yBAAKG,UAAU,sBACb,2BACEQ,KAAK,OACLR,UAAU,iBACVS,MAAOb,EACPc,SA9BY,SAACR,GACrBA,EAAEC,iBAEFN,EAAWK,EAAES,OAAOF,QA4BZG,YAAY,qBAEd,4BAAQZ,UAAU,eAChB,yBAAKA,UAAU,iBACb,kBAAC,IAAD,CAAiBa,KAAMC,SAI7B,wBAAId,UAAU,mBACZ,wBAAIA,UAAU,gBAAd,YACCF,EAAMiB,KAAI,SAACC,GAAD,OACT,wBAAIC,IAAKD,EAAKZ,GAAIJ,UAAU,kBAC1B,yBAAKA,UAAU,mBACb,wBAAIA,UAAU,mBAAmBgB,EAAKT,MACtC,4BAAQP,UAAU,gBAChB,0BAAMA,UAAU,aACd,kBAAC,IAAD,CAAiBa,KAAMK,QAG3B,4BAAQlB,UAAU,oBAChB,0BAAMA,UAAU,iBACd,kBAAC,IAAD,CACEmB,QAAS,kBAnCTf,EAmC0BY,EAAKZ,QAlCjDL,EAASD,EAAMsB,QAAO,SAACJ,GAAD,OAAUA,EAAKZ,KAAOA,MAD3B,IAACA,GAoCAS,KAAMQ,kBChDbC,MAbf,WACE,OACE,yBAAKtB,UAAU,OACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,wBAAIA,UAAU,WAAd,YACA,kBAAC,EAAD,UCEUuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.63473f7f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { faPlus, faPen, faCheck } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport \"../Input/Input.css\";\nimport \"../TodoItem/TodoItem.css\";\nimport \"../List/List.css\";\n\nconst Input = () => {\n  const [newTodo, setNewTodo] = useState(\"\");\n  const [todos, setTodos] = useState([]);\n\n  const handleNewTodo = (e) => {\n    e.preventDefault();\n    //accesswhatever is inserted into the input element\n    setNewTodo(e.target.value);\n  };\n\n  const handleTodo = (e) => {\n    //cancel the default action normally taken\n    e.preventDefault();\n    //if the input field is empty, don't do anything (create a list item that is empty)\n    if (newTodo === \"\") return;\n    //display the new todo in the unordered list as a list item\n    setTodos([...todos, { id: Date.now(), text: newTodo }]);\n    //after pressing enter the input is reset back to an empty input with the placeholder\n    setNewTodo(\"\");\n  };\n\n  //by determining an id of a todo removes the todo\n  const removeTodo = (id) => {\n    setTodos(todos.filter((todo) => todo.id !== id));\n  };\n\n  return (\n    <div className=\"add-new-todo-item\">\n      <form onSubmit={handleTodo}>\n        <div className=\"new-todo-container\">\n          <input\n            type=\"text\"\n            className=\"new-todo-input\"\n            value={newTodo}\n            onChange={handleNewTodo}\n            placeholder=\"new todo item...\"\n          />\n          <button className=\"btn btn-add\">\n            <div className=\"new-todo-icon\">\n              <FontAwesomeIcon icon={faPlus} />\n            </div>\n          </button>\n        </div>\n        <ul className=\"list-todo-group\">\n          <h3 className=\"list-heading\">My Todos</h3>\n          {todos.map((todo) => (\n            <li key={todo.id} className=\"list-todo-item\">\n              <div className=\"todo-item-added\">\n                <h6 className=\"added-todo-item\">{todo.text}</h6>\n                <button className=\"btn btn-edit\">\n                  <span className=\"item-edit\">\n                    <FontAwesomeIcon icon={faPen} />\n                  </span>\n                </button>\n                <button className=\"btn btn-complete\">\n                  <span className=\"item-complete\">\n                    <FontAwesomeIcon\n                      onClick={() => removeTodo(todo.id)}\n                      icon={faCheck}\n                    />\n                  </span>\n                </button>\n              </div>\n            </li>\n          ))}\n        </ul>\n      </form>\n    </div>\n  );\n};\n\nexport default Input;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Input from \"./components/Input\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <div className=\"container\">\n        <div className=\"row\">\n          <h3 className=\"heading\">New Todo</h3>\n          <Input />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}